<template>
    <div class="app-container">
        <div class="filter-container">
            <el-form ref="filterForm" :model="listQuery" :inline="true">
                {{range $k,$v := .table.columns -}}
                    {{if not (Contains $v.columnName "sort") -}}
                        <el-form-item prop="{{$v.columnName | Pascal}}">
                            {{- if Contains $v.columnName "_time"}}
                                <el-date-picker
                                        v-model{{if IsNumberDataType $v.dataType}}{{end}}="listQuery.{{$v.columnName | Pascal}}"
                                        range-separator="至"
                                        start-placeholder="{{$v.columnComment | Breaker}}"
                                        end-placeholder="{{$v.columnComment | Breaker}}"
                                        style="width: 380px;"
                                        type="datetimerange"
                                        value-format="timestamp"
                                        clearable
                                        @change="handleFilter"/>
                            {{- else if Contains $v.columnName "status"}}
                                <el-select v-model{{if IsNumberDataType $v.dataType}}{{end}}="listQuery.{{$v.columnName | Pascal}}" placeholder="{{$v.columnComment | Breaker}}" style="max-width: 80px" clearable @clear="listQuery.{{$v.columnName | Pascal}}=undefined" @change="handleFilter">
                                    <el-option v-for="item in {{$.table.tableName | Camel}}StatusDict" :key="item.ID" :label="item.Title" :value="parseInt(item.Value)" />
                                </el-select>
                            {{- else}}
                                <el-input v-model{{if IsNumberDataType $v.dataType}}.number{{end}}="listQuery.{{$v.columnName | Pascal}}" placeholder="{{$v.columnComment | Breaker}}" clearable{{if IsNumberDataType $v.dataType}} @clear="listQuery.{{$v.columnName | Pascal}}=undefined"{{end}} style="max-width: 100px"
                                          @keyup.enter.native="handleFilter"/>
                            {{- end}}
                        </el-form-item>
                    {{end -}}
                {{end -}}
                <el-form-item><el-button v-waves type="primary" icon="el-icon-search" @click="handleFilter">搜索</el-button></el-form-item>
                <el-form-item><el-button v-waves icon="el-icon-refresh" @click="resetFilter">重置</el-button></el-form-item>
            </el-form>
        </div>
        <el-row :gutter="10" class="action-container">
            <el-col :span="1.5">
                <el-button class="action-item" type="primary" icon="el-icon-plus" @click="handleCreate">添加</el-button>
            </el-col>
            <el-col :span="1.5">
                <el-button class="action-item" type="primary" icon="el-icon-edit" :disabled="singleSelected" @click="handleUpdate">修改</el-button>
            </el-col>
            <el-col :span="1.5">
                <el-button class="action-item" type="danger" icon="el-icon-delete" :disabled="multipleSelected" @click="handleDelete">删除</el-button>
            </el-col>
        </el-row>

        <el-table
                class="data-container"
                :key="tableKey"
                v-loading="listLoading"
                :data="list"
                border
                fit
                highlight-current-row
                style="width: 100%;"
                @sort-change="sortChange"
                @selection-change="handleSelectionChange"
        >
            <el-table-column align="center" type="selection" width="55"></el-table-column>
            {{range $k,$v := .table.columns -}}
                <el-table-column label="{{$v.columnComment | Breaker}}" prop="{{$v.columnName | Pascal}}" {{if or (eq $v.columnName "id") (Contains $v.columnName "sort")}}sortable="custom" {{end}}align="center" {{if Contains $v.columnName "_time"}}min-width="120" {{end}}>
                    <template slot-scope="{row}">
                        {{- if Contains $v.columnName "_time"}}
                            <span>{{`{{`}}row.{{$v.columnName | Pascal}} | parseTime('{y}-{m}-{d} {h}:{i}') {{`}}`}}</span>
                        {{- else if Contains $v.columnName "status"}}
                            <el-tag :type="row.{{$v.columnName | Pascal}} | dictFilter({{$.table.tableName | Camel}}StatusDict,'TagType')">{{`{{`}} row.{{$v.columnName | Pascal}} | dictFilter({{$.table.tableName | Camel}}StatusDict,'Title') {{`}}`}}</el-tag>
                        {{- else}}
                            <span>{{`{{`}}row.{{$v.columnName | Pascal}}{{`}}`}}</span>
                        {{- end}}
                    </template>
                </el-table-column>
            {{end}}
            <el-table-column label="操作" align="center" min-width="120">
                <template slot-scope="{row,$index}">
                    <el-button type="primary" icon="el-icon-edit" size="mini" :plain="true" @click="handleUpdate(row)"></el-button>
                    <el-button type="danger" icon="el-icon-delete" size="mini" :plain="true" @click="handleDelete(row,$index)"></el-button>
                </template>
            </el-table-column>
        </el-table>

        <pagination v-show="total>0" :total="total" :page.sync="listQuery.Page" :limit.sync="listQuery.Size" @pagination="getList"/>

        <el-dialog :title="textMap[dialogStatus]" :visible.sync="dialogFormVisible" :close-on-click-modal="false" width="80%">
            <el-form ref="dataForm" :rules="rules" :model="temp" label-position="left" label-width="90px">
                {{- range $k,$v := .table.columns}}
                    {{- if Contains $v.columnName "_time"}}
                        <el-form-item label="{{$v.columnComment | Breaker}}" prop="{{$v.columnName | Pascal}}">
                            <el-date-picker v-model{{if IsNumberDataType $v.dataType}}.number{{end}}="temp.{{$v.columnName | Pascal}}" type="datetime" value-format="timestamp" placeholder="请选择{{$v.columnComment | Breaker}}"/>
                        </el-form-item>
                    {{- else if Contains $v.columnName "status"}}
                        <el-form-item label="{{$v.columnComment | Breaker}}" prop="{{$v.columnName | Pascal}}">
                            <el-radio v-model.number="temp.Status" v-for="item in {{$.table.tableName | Camel}}StatusDict" :key="item.ID" :label="parseInt(item.Value)">{{"{{"}}item.Title{{"}}"}}</el-radio>
                        </el-form-item>
                    {{- else}}
                        <el-form-item label="{{$v.columnComment | Breaker}}" prop="{{$v.columnName | Pascal}}">
                            <el-input v-model{{if IsNumberDataType $v.dataType}}.number{{end}}="temp.{{$v.columnName | Pascal}}"{{if Contains $v.columnName "description"}} type="textarea"{{end}} placeholder="请输入{{$v.columnComment | Breaker}}"/>
                        </el-form-item>
                    {{- end}}
                {{- end}}
                <el-form-item v-if="dialogStatus==='create'" label="添加之后">
                    <el-radio v-model="dialogNext" :label="10">关闭窗口</el-radio>
                    <el-radio v-model="dialogNext" :label="20">继续添加</el-radio>
                </el-form-item>
                <el-form-item>
                    <el-button type="primary" @click="dialogStatus==='create'?createData():updateData()">
                        确定
                    </el-button>
                    <el-button @click="dialogFormVisible = false">
                        取消
                    </el-button>
                </el-form-item>
            </el-form>
        </el-dialog>
    </div>
</template>

<script>
    import { create{{.table.tableName | Pascal}}, delete{{.table.tableName | Pascal}}, update{{.table.tableName | Pascal}}, find{{.table.tableName | Pascal}}, find{{.table.tableName | Pascal}}List } from '@/api/{{.table.tableName | Dash}}'
    import waves from '@/directive/waves'
    import Pagination from '@/components/Pagination'

    export default {
        name: '{{.table.tableName | Pascal}}',
        components: {Pagination},
        directives: {waves},
        filters: {
        },
        data() {
            return {
                {{$.table.tableName | Camel}}StatusDict: [],
                tableKey: 0,
                ids: [],
                singleSelected: true,
                multipleSelected: true,
                list: null,
                total: 0,
                listLoading: true,
                listQuery: {
                    Page: 1,
                    Size: 20,
                    Sort: undefined,
            {{- range $k,$v := .table.columns -}}
            {{- if or (Contains $v.columnName "id") (Contains $v.columnName "status")}}
            {{$v.columnName | Pascal}}: undefined,
                    {{$v.columnName | Pascal}}List: undefined,
            {{- else if Contains $v.columnName "_time"}}
            {{$v.columnName | Pascal}}: undefined,
            {{- else if Contains $v.columnName "sort"}}
            {{- else}}
            {{$v.columnName | Pascal}}: undefined,
            {{- end -}}
            {{end}}
                },
                temp: {
                    {{- range $k,$v := .table.columns}}
                    {{$v.columnName | Pascal}}: undefined,
                    {{- end}}
                },
                dialogFormVisible: false,
                dialogNext: 10,
                dialogStatus: '',
                textMap: {
                    update: '编辑{{.table.tableComment | Breaker}}',
                    create: '添加{{.table.tableComment | Breaker}}'
                },
                rules: {
                },
                downloadLoading: false
            }
        },
        created() {
            this.getList()
            this.$store.dispatch('dict/getDict', '{{$.table.tableName | Pascal}}Status').then((resp) => {
                this.{{$.table.tableName | Camel}}StatusDict = resp
            })
        },
        methods: {
            getList() {
                this.listLoading = true
                find{{.table.tableName | Pascal}}List(this.listQuery).then(response => {
                    this.list = response.Data.Items
                    this.total = response.Data.Total
                    this.listLoading = false
                }).catch(() => {
                    this.listLoading = false
                })
            },
            handleFilter() {
                this.listQuery.Page = 1
                this.getList()
            },
            resetFilter() {
                this.$refs["filterForm"].resetFields()
                this.getList()
            },
            handleModifyStatus(row, status) {
                this.$message({
                    message: '操作成功',
                    type: 'success'
                })
                row.Status = status
            },
            sortChange(data) {
                const { prop, order } = data
                if (order === 'ascending') {
                    this.listQuery.Sort = prop
                } else if (order === 'descending') {
                    this.listQuery.Sort = prop + ' desc'
                } else {
                    this.listQuery.Sort = undefined
                }
                this.handleFilter()
            },
            resetTemp() {
                this.temp = {
                {{range $k,$v := .table.columns -}}
                {{$v.columnName | Pascal}}: undefined,
                {{end -}}
            }
            },
            handleCreate() {
                this.resetTemp()
                this.dialogStatus = 'create'
                this.dialogFormVisible = true
                this.$nextTick(() => {
                    this.$refs['dataForm'].clearValidate()
                })
            },
            createData() {
                this.$refs['dataForm'].validate((valid) => {
                    if (valid) {
                        create{{.table.tableName | Pascal}}(this.temp).then((resp) => {
                            this.list.unshift(resp.Data)
                            if (this.dialogNext === 10) {
                                this.dialogFormVisible = false
                            }
                            this.$notify({
                                title: '成功',
                                message: '创建成功',
                                type: 'success',
                                duration: 2000
                            })
                        })
                    }
                })
            },
            handleUpdate(row) {
                const id = row.ID || this.ids[0]
                find{{.table.tableName | Pascal}}({ID: id}).then(response => {
                    this.temp = response.Data
                })
                this.dialogStatus = 'update'
                this.dialogFormVisible = true
                this.$nextTick(() => {
                    this.$refs['dataForm'].clearValidate()
                })
            },
            updateData() {
                this.$refs['dataForm'].validate((valid) => {
                    if (valid) {
                        const tempData = Object.assign({}, this.temp)
                        update{{.table.tableName | Pascal}}(tempData).then(() => {
                            const index = this.list.findIndex(v => v.ID === this.temp.ID)
                            this.list.splice(index, 1, this.temp)
                            this.dialogFormVisible = false
                            this.$notify({
                                title: '成功',
                                message: '更新成功',
                                type: 'success',
                                duration: 2000
                            })
                        })
                    }
                })
            },
            handleDelete(row, index) {
                const ids = row.ID ? [row.ID] : this.ids
                this.$confirm('是否确认删除编号为"' + ids + '"的数据项?', '警告', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(function () {
                    return delete{{.table.tableName | Pascal}}({IDList: ids})
                }).then(() => {
                    this.getList()
                    this.$notify({
                        title: '成功',
                        message: '删除成功',
                        type: 'success',
                        duration: 2000
                    })
                }).catch(function () {
                })
            },
            handleSelectionChange(selection) {
                this.ids = selection.map(item => item.ID)
                this.singleSelected = selection.length !== 1
                this.multipleSelected = !selection.length
            },
        }
    }
</script>
